@page "/detail/{id}"
@inject IDialogService DialogService

<PageTitle>@(ContentMeta is null ? "Nonton" : $"{ContentMeta?.Name} ({@ContentMeta?.Year})")</PageTitle>

@if (ContentMeta is not null)
{
    <div style="background-image: url('@ContentMeta.Background'); margin: -70px -28px -85px -85px; box-shadow: inset 0 250px 250px black; height: 98vh; background-repeat: no-repeat; background-position: center; background-size: cover;">
        <div style="padding: 70px 25px 85px 85px">
            <div class="d-flex flex-column" style="align-items: center; gap: 15px">
                <MudImage Src="@ContentMeta.Logo" ObjectFit="ObjectFit.Contain" Width="400"></MudImage>
                <MudText Typo="Typo.h4" Style="display:none;">@ContentMeta?.Name</MudText>
                @if(ContentMeta.Genres is not null)
                {
                    <div class="d-flex flex-row">                        
                        @foreach (var genre in ContentMeta.Genres)
                        {
                            <MudChip Color="Color.Dark">@genre</MudChip>
                        }
                    </div>
                }
                <div class="d-flex flex-row">
                    <MudChip Color="Color.Dark" Icon="@Icons.Filled.CalendarToday">@ContentMeta.Year</MudChip>
                    @if(!string.IsNullOrWhiteSpace(ContentMeta.ImdbRating))
                    {
                        <MudChip Color="Color.Dark" Icon="@ImdbIcon">@ContentMeta.ImdbRating</MudChip>
                    }
                    <MudChip Color="Color.Dark" Icon="@Icons.Filled.Watch">@ContentMeta.Runtime</MudChip>
                </div>
                <MudPaper Height="auto" Width="650px" Style="padding: 20px 20px 20px 20px; background: rgba(39,39,47,0.5); backdrop-filter: blur(20px);">
                    <MudText Typo="Typo.subtitle1">@ContentMeta.Description</MudText>
                </MudPaper>
                <div class="d-flex flex-row" style="gap: 10px;">
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Dark" @onclick="() => PlayTrailer()">Trailer</MudButton>
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Dark" StartIcon="@Icons.Filled.PlayArrow" @onclick="() => SelectSource()">Watch</MudButton>
                </div>
            </div>

        </div>
    </div>

    <MudDrawer @bind-Open="@_openDrawer" Width="30%" Height="100%" Anchor="Anchor.Right" Elevation="1" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Select Source</MudText>
        </MudDrawerHeader>
        @if (StreamResponse is not null && StreamResponse.Streams is not null && StreamResponse.Streams.Any())
        {
            @foreach (var stream in StreamResponse.Streams)
            {
                <MudButton ButtonType="ButtonType.Button" Color="Color.Dark" Variant="Variant.Filled" Size="Size.Large" Style="padding-top:15px; padding-bottom:15px;" Href="@stream.ExternalUrl" Target="blank">
                    @stream.Name (@stream.Title)
                </MudButton>
            }
        }
        else {
            <MudText Typo="Typo.h5" Style="padding-left:25px;">No streams were found</MudText>
        }
    </MudDrawer>
}


@code {

    [Parameter]
    public string Id { get; set; } = null!;

    public IStremioApi StremioApi => RestService.For<IStremioApi>("https://v3-cinemeta.strem.io");
    public IStremioApi StreamApi => RestService.For<IStremioApi>("https://watchhub.strem.io");
    public Meta? ContentMeta { get; set; }

    public StreamResponse? StreamResponse { get; set; }
    
    const string ImdbIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><!--! Font Awesome Free 6.1.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --><path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM21.3 229.2H21c.1-.1.2-.3.3-.4zM97 319.8H64V192h33zm113.2 0h-28.7v-86.4l-11.6 86.4h-20.6l-12.2-84.5v84.5h-29V192h42.8c3.3 19.8 6 39.9 8.7 59.9l7.6-59.9h43zm11.4 0V192h24.6c17.6 0 44.7-1.6 49 20.9 1.7 7.6 1.4 16.3 1.4 24.4 0 88.5 11.1 82.6-75 82.5zm160.9-29.2c0 15.7-2.4 30.9-22.2 30.9-9 0-15.2-3-20.9-9.8l-1.9 8.1h-29.8V192h31.7v41.7c6-6.5 12-9.2 20.9-9.2 21.4 0 22.2 12.8 22.2 30.1zM265 229.9c0-9.7 1.6-16-10.3-16v83.7c12.2.3 10.3-8.7 10.3-18.4zm85.5 26.1c0-5.4 1.1-12.7-6.2-12.7-6 0-4.9 8.9-4.9 12.7 0 .6-1.1 39.6 1.1 44.7.8 1.6 2.2 2.4 3.8 2.4 7.8 0 6.2-9 6.2-14.4z\"/></svg>";

    bool _openDrawer = false;
    readonly DialogOptions _trailerDialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = false, FullScreen = false, CloseOnEscapeKey = true, CloseButton = true };
    

    protected override async Task OnParametersSetAsync()
    {
        var detail = await StremioApi.GetMovieDetail(Id);
        ContentMeta = detail.Meta;

        StateHasChanged();
    }

    void SelectTrailer()
    {
        _openDrawer = true;
    }

    async Task SelectSource()
    {
        if (ContentMeta is not null && !string.IsNullOrWhiteSpace(ContentMeta.ImdbId))
        {
            _openDrawer = true;
            StreamResponse = await StreamApi.GetStream(ContentMeta.ImdbId);
        }
    }

    void PlayTrailer()
    {
        var dialogParameters = new DialogParameters
        {
            { "YoutubeId", ContentMeta?.TrailerStreams?.FirstOrDefault()?.YtId }
        };
        
        DialogService.Show<YoutubePopup>($"Trailer {ContentMeta?.Name} ({ContentMeta?.Year})", dialogParameters, _trailerDialogOptions);
    }
}