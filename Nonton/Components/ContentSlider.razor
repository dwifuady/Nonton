@inject NavigationManager NavigationManager

<MudText Typo="Typo.body1">@CatalogName</MudText>
<div class="wrapper-item">
    @for (var s = 1; s <= _sectionCount; s++)
    {
        var sectionIdCurrent = $"section{CatalogName?.Replace(" ", "")}{s}";
        var sectionIdPrev = $"section{CatalogName?.Replace(" ", "")}{(s == 1 ? _sectionCount : s - 1)}";
        var sectionIdNext = $"section{CatalogName?.Replace(" ", "")}{(s == _sectionCount ? 1 : s + 1)}";

        <section id="@sectionIdCurrent">
            @if (s != 1)
            {
                <button type="button" onclick="document.getElementById('@sectionIdPrev').scrollIntoView({ behavior: 'smooth', inline: 'start', block: 'nearest' })" class="arrow__btn left-arrow">
                    ‹
                </button>
            }

            @{
                if (Metas is not null)
                {
                    var metas = Metas.Skip((s - 1) * _limit).Take(_limit);
                    foreach (var meta in metas)
                    {
                        <div class="item">
                            <button class="d-flex flex-column" @onclick="() => ViewDetail(meta.ImdbId!)">
                                <MudImage Src="@meta.Poster" Width="145" Height="250" Elevation="25" Class="rounded-lg ma-4 cursor-pointer" ObjectFit="ObjectFit.Cover"></MudImage>
                                <span>@meta.Name</span>
                            </button>
                        </div>
                    }
                }
            }
            @if (s != _sectionCount)
            {
                <button type="button" onclick="document.getElementById('@sectionIdNext').scrollIntoView({ behavior: 'smooth', inline: 'start', block: 'nearest' })" class="arrow__btn right-arrow">
                    ›
                </button>
            }
        </section>
    }
</div>


@code {
    [Parameter]
    public string? CatalogName { get; set; }

    [Parameter]
    public IEnumerable<Meta> Metas { get; set; } = null!;

    private int _limit = 9;
    private int _sectionCount = 0;

    protected override void OnParametersSet()
    {
        _sectionCount = (int)Math.Ceiling(Metas.Count() / (double)_limit);
    }

    public async Task ViewDetail(string id)
    {
        await Task.Run(() => NavigationManager.NavigateTo($"detail/{id}"));
    }
}