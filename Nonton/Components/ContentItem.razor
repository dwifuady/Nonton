@using Nonton.Features.Catalogs
@using Nonton.Features.Catalogs.Models
@using Nonton.Features.Addons.Dtos

@inject NavigationManager NavigationManager
@inject ICatalogApi CatalogApi
@inject IJSRuntime JsRuntime

<LoadingContainer State="LoadingContainerState">
    <Loading>
        <div class="flex flex-col">
            <div class="w-40 h-8 mb-2 bg-slate-700 rounded-lg animate-pulse"></div>
            <section class="flex no-scrollbar snap-x snap-mandatory flex-nowrap overflow-x-scroll gap-x-5">
                @for (var i = 0; i < 10; i++)
                {
                    <div class="w-40 flex-none rounded snap-center snap-always cursor-pointer animate-pulse">
                        <div class="flex flex-col place-items-center gap-3">
                            <div class="w-36 h-64 object-cover rounded-lg bg-slate-700"></div>
                            <div class="w-32 h-6 bg-slate-700 rounded-lg"></div>
                        </div>
                    </div>
                }
            </section>
        </div>
    </Loading>
    <Loaded>
        @if (Metas is not null && Metas.Any())
        {
            <div class="flex flex-col gap-2">
                <div>
                    @if (SearchMode)
                    {
                        <span class="text-lg">@Catalog.AddonName - @Catalog.CatalogType.ToTitleCase()</span>
                    }
                    else
                    {
                        <span class="text-lg">@Catalog.CatalogType.ToTitleCase() - @Catalog.CatalogName</span>
                    }
                </div>
                <section class="flex no-scrollbar snap-x snap-mandatory flex-nowrap overflow-x-scroll gap-x-5" id="content-container-@Catalog.CatalogType-@Catalog.CatalogId">
                    @foreach (var meta in Metas)
                    {
                        <div class="w-40 flex-none rounded snap-center snap-always cursor-pointer" @onclick="() => ViewDetail(meta.ImdbId!)">
                            <div class="flex flex-col place-items-center gap-3">
                                <img src="@meta.Poster" class="w-36 h-64 object-cover rounded-lg"/>
                                <span class="text-center">@meta.Name</span>
                            </div>
                        </div>
                    }
                </section>
            </div>
        }
    </Loaded>
    <Error>

    </Error>
</LoadingContainer>

@code {

    [Parameter]
    public Catalog Catalog { get; set; } = null!;

    [Parameter]
    public bool SearchMode { get; set; }

    [Parameter]
    public string? SearchQuery { get; set; }

    public IEnumerable<Meta>? Metas { get; set; }

    public LoadingContainerState LoadingContainerState { get; set; } = LoadingContainerState.Empty;

    protected override async Task OnParametersSetAsync()
    {
        LoadingContainerState = LoadingContainerState.Loading;
        await LoadItems();
        LoadingContainerState = LoadingContainerState.Loaded;
    }

    private async Task LoadItems()
    {
        try
        {
            if (SearchMode && !string.IsNullOrWhiteSpace(SearchQuery))
            {
                var discoverItem = await CatalogApi.Search(Catalog.AddonBaseUri, Catalog.CatalogType, Catalog.CatalogId, SearchQuery);
                Metas = discoverItem.Metas;
            }
            else
            {
                var discoverItem = await CatalogApi.GetDiscoverItem(Catalog.AddonBaseUri, Catalog.CatalogType, Catalog.CatalogId);
                Metas = discoverItem.Metas;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (!string.IsNullOrWhiteSpace(Catalog.CatalogName))
    //    {
    //        await JsRuntime.InvokeVoidAsync("forceHorizontalScroll", $"content-container-{Catalog.CatalogType}-{Catalog.CatalogId}");
    //    }
    //}

    public async Task ViewDetail(string id)
    {
        await Task.Run(() => NavigationManager.NavigateTo($"detail/{Catalog.CatalogType}/{id}"));
    }
}